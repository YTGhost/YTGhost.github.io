<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>String、StringBuffer和StringBuilder类之间的区别</title>
      <link href="/2019/10/08/String%E3%80%81StringBuffer%E5%92%8CStringBuilder%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/10/08/String%E3%80%81StringBuffer%E5%92%8CStringBuilder%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p><strong>字符串就是一连串的字符序列，Java提供了String、StringBuffer和Stringbuilder三个类来封装字符串，并提供了一系列方法来操作字符串对象，来看看它们有什么不同吧。</strong></p><a id="more"></a><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>String类是<strong>不可变类</strong>，即一旦一个String对象被创建以后，包含在这个对象中的字符序列是不可改变的，直至这个对象被<strong>销毁</strong>。</p><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>StringBuffer对象则代表一个字符序列可变的字符串，当一个StringBuffer被创建以后，通过StringBuffer提供的一系列方法可以改变这个字符串对象的字符序列。一旦通过StringBuffer生成了最终想要的字符串，就可以调用它的tostring()方法将其转换为一个String对象。</p><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>StringBuilder类是JDK1.5新增的类，它也代表可变字符串对象。实际上，StringBuilder和StringBuffer<strong>基本相似</strong>，两个类的构造器和方法也基本相同。不同的是，StringBuffer是线程安全的，而StingBuilder则没有实现线程安全功能，所以<strong>性能略高</strong>。因此在通常情况下，如果需要创建一个内容可变的字符串对象，则应该优先考虑使用StringBuilder类。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 基本语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static和abstract能否同时存在</title>
      <link href="/2019/10/07/static%E5%92%8Cabstract%E8%83%BD%E5%90%A6%E5%90%8C%E6%97%B6%E5%AD%98%E5%9C%A8/"/>
      <url>/2019/10/07/static%E5%92%8Cabstract%E8%83%BD%E5%90%A6%E5%90%8C%E6%97%B6%E5%AD%98%E5%9C%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>先说结论，static和abstract并不是绝对互斥的。它们虽然不能同时修饰某个方法，但它们可以同时修饰内部类。</strong></p><a id="more"></a><ul><li>当使用static修饰一个方法是，表明这个方法属于该类本身，即通过类就可以调用该方法，但如果该方法被定义成抽象方法，则将导致通过该类来调用该方法时出现错误（因为调用了一个没有方法体的方法）。因此static和abstract不能同时修饰某个方法，即没有所谓的类抽象方法。</li><li>但是当static修饰一个内部类时，表明此时该内部类可以当做一个普通类来使用，而不需要先实例化外部类。此时该内部类很明显就可以使用abstract来修饰了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/06/hello-world/"/>
      <url>/2019/10/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
