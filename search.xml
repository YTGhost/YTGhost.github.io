<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第1章 内容简介</title>
      <link href="/2019/10/10/%E7%AC%AC1%E7%AB%A0-%E5%86%85%E5%AE%B9%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/10/10/%E7%AC%AC1%E7%AB%A0-%E5%86%85%E5%AE%B9%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“The secret of getting ahead is to get started.”– Mark Twain</p></blockquote><a id="more"></a><p>本书是您掌握使用Python编程语言和Keras + mxnet库并将深度学习应用于实际计算机视觉问题的指南。在这本书中，您将学习如何将深度学习应用于诸如图像分类，对象检测，大规模数据集上的训练网络之类的项目，以及更多内容。</p><h2 id="1-1-Deep-Learning的正确打开方式"><a href="#1-1-Deep-Learning的正确打开方式" class="headerlink" title="1.1 Deep Learning的正确打开方式"></a>1.1 Deep Learning的正确打开方式</h2><p>在这一小节，作者以他自身为例，讲述了他刚开始学习深度学习的情况，简单来说就是理论学习与实践之间所发生的矛盾，这种矛盾让作者很烦恼。作者所想要写的这本书就是要让读者能够在学到基础理论的同时能像读烹饪书一样讲理论化为代码。</p><h2 id="1-2-这本书适合于哪些人"><a href="#1-2-这本书适合于哪些人" class="headerlink" title="1.2 这本书适合于哪些人"></a>1.2 这本书适合于哪些人</h2><p>这本书适用于希望精通计算机视觉和视觉识别的深度学习的开发人员，研究人员和学生。</p><h2 id="1-3-通过这本书我们能学到哪些知识？"><a href="#1-3-通过这本书我们能学到哪些知识？" class="headerlink" title="1.3 通过这本书我们能学到哪些知识？"></a>1.3 通过这本书我们能学到哪些知识？</h2><p>我们将能学到以下<strong>基础知识</strong></p><ol><li><p>机器学习</p></li><li><p>神经网络</p></li><li><p>卷积神经网络</p></li><li><p>如何使用我们自己自定义的数据集</p><h2 id="1-4-我们所需要使用的工具与语言"><a href="#1-4-我们所需要使用的工具与语言" class="headerlink" title="1.4 我们所需要使用的工具与语言"></a>1.4 我们所需要使用的工具与语言</h2><p>这本书中的所有示例都将使用<strong>Python</strong>语言。<br>我们将使用的主要深度学习库是<strong>Keras</strong>。<strong>Keras</strong>是由Google杰出的深度学习研究人员和工程师来维护的库。这也是作者最喜欢的的深度学习库。<br>我们将使用的第二个深度学习库是<strong>mxnet（仅在ImageNetBundle）</strong>，它轻巧，可移植且灵活。<br>最后我们还将使用一些计算机视觉，图像处理和机器学习的库，例如OpenCV，scikit-image,scikit-learn等。</p><h3 id="1-4-1-关于TensorFlow"><a href="#1-4-1-关于TensorFlow" class="headerlink" title="1.4.1 关于TensorFlow"></a>1.4.1 关于TensorFlow</h3><p>TensorFlow和Theano是用于定义抽象的通用计算图的库。虽然它们用于深度学习，但它们不是深度学习框架，实际上除深度学习外还用于许多其他应用程序。另一方面，Keras是一种深度学习框架，它提供了精心设计的API来促进使用深度学习构建深度神经网络。在后台，Keras使用theTensorFlow或Theano计算后端，从而使其能够利用这些强大的计算引擎。</p><h3 id="1-4-2-这本书的学习中我需要先去学习OpenCV吗？"><a href="#1-4-2-这本书的学习中我需要先去学习OpenCV吗？" class="headerlink" title="1.4.2 这本书的学习中我需要先去学习OpenCV吗？"></a>1.4.2 这本书的学习中我需要先去学习OpenCV吗？</h3><p>这本书的学习中我们只使用OpenCV来帮助进行基本的图像处理操作，例如从磁盘加载图像，将其显示到屏幕上以及其他一些操作。但作者还是建议同时学习OpenCV，毕竟深度学习只是计算机视觉的一面，我们应该学习多种计算机视觉技术来完善知识面。</p><h2 id="1-5-开发我们自己的深度学习工具集"><a href="#1-5-开发我们自己的深度学习工具集" class="headerlink" title="1.5 开发我们自己的深度学习工具集"></a>1.5 开发我们自己的深度学习工具集</h2><p>这本书还将演示如何使用现有的深度学习库来构建我们自己的基于Python的自定义工具集，从而使我们能够训练自己的深度学习网络。这个工具集与作者在过去几年中自己进行深度学习研究和开发中逐渐完善的工具包相同。我们将在本书的学习过程中逐渐构建工具包中的组件，当我们的学习结束时，我们的工具集能够：</p></li><li><p>从磁盘加载图像数据集，将其存储在内存中，或将其写入优化的数据库格式。</p></li><li><p>对图像进行预处理，使其适合于训练卷积神经网络。</p></li><li><p>创建一个蓝图类，可用于构建我们自己的自定义实现的卷积神经网络。</p></li><li><p>手动实现流行的CNN架构，例如AlexNet，VGGNet，GoogLeNet，ResNet和SqueezeNet（并从头开始进行培训）。</p></li><li><p>以及更多！</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 《deep learning for computer vision with python》 </category>
          
          <category> starter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Computer Version </tag>
            
            <tag> Deep Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String、StringBuffer和StringBuilder类之间的区别</title>
      <link href="/2019/10/08/String%E3%80%81StringBuffer%E5%92%8CStringBuilder%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/10/08/String%E3%80%81StringBuffer%E5%92%8CStringBuilder%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p><strong>字符串就是一连串的字符序列，Java提供了String、StringBuffer和Stringbuilder三个类来封装字符串，并提供了一系列方法来操作字符串对象，来看看它们有什么不同吧。</strong></p><a id="more"></a><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>String类是<strong>不可变类</strong>，即一旦一个String对象被创建以后，包含在这个对象中的字符序列是不可改变的，直至这个对象被<strong>销毁</strong>。</p><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>StringBuffer对象则代表一个字符序列可变的字符串，当一个StringBuffer被创建以后，通过StringBuffer提供的一系列方法可以改变这个字符串对象的字符序列。一旦通过StringBuffer生成了最终想要的字符串，就可以调用它的tostring()方法将其转换为一个String对象。</p><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>StringBuilder类是JDK1.5新增的类，它也代表可变字符串对象。实际上，StringBuilder和StringBuffer<strong>基本相似</strong>，两个类的构造器和方法也基本相同。不同的是，StringBuffer是线程安全的，而StingBuilder则没有实现线程安全功能，所以<strong>性能略高</strong>。因此在通常情况下，如果需要创建一个内容可变的字符串对象，则应该优先考虑使用StringBuilder类。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 基本语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static和abstract能否同时存在</title>
      <link href="/2019/10/07/static%E5%92%8Cabstract%E8%83%BD%E5%90%A6%E5%90%8C%E6%97%B6%E5%AD%98%E5%9C%A8/"/>
      <url>/2019/10/07/static%E5%92%8Cabstract%E8%83%BD%E5%90%A6%E5%90%8C%E6%97%B6%E5%AD%98%E5%9C%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>先说结论，static和abstract并不是绝对互斥的。它们虽然不能同时修饰某个方法，但它们可以同时修饰内部类。</strong></p><a id="more"></a><ul><li>当使用static修饰一个方法是，表明这个方法属于该类本身，即通过类就可以调用该方法，但如果该方法被定义成抽象方法，则将导致通过该类来调用该方法时出现错误（因为调用了一个没有方法体的方法）。因此static和abstract不能同时修饰某个方法，即没有所谓的类抽象方法。</li><li>但是当static修饰一个内部类时，表明此时该内部类可以当做一个普通类来使用，而不需要先实例化外部类。此时该内部类很明显就可以使用abstract来修饰了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/06/hello-world/"/>
      <url>/2019/10/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
